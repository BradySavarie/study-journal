So I ended up doing a little bit of research yesterday after failing to deploy my small project and it turns out that i'm not the only one who always runs into issues with deploying projects. It's actually an entire job in and of itself to manage the process, and is a huge part of dev ops. This makes me feel a little better because I recognize that whenever it is time to deploy I am always trying to rush through it as quick as possible to just get it done, but the truth is that it is a skill I will need to actually stop and focus on learning if I want to really get good at it and understand the process thoroughly.

Anyways, as mentioned previously I am going to follow the direction of the MDN tutorial series to host my project which will walk me through the basics of what I need to know. For now though I am learning about routes and controllers. Let's go.

Cool so I finished up the routes and controllers lesson. Mostly a contained information that i've covered in the past but a good review nonetheless. I basically setup a catalog router that responds to all of the routes that my application will be using. A controller function is called for each different route. The controller functions are split into modules based on the models that will be used within them. So one controller for book, one for genre, etc. Each of these controllers contain all of the related functions within it which is a nice to way organize the application. Since we can assume that the controller functions themselves will interact with a database and will therefore by asynchronous we can wrap them in a piece of middleware called express-async-handler. This function has built-in error handling that forwards the err to the next pieceof middleware as it occurs so that it can eventually be handled by a global error handling function. We would otherwise have to write the error handling using a try-catch block within every single controller function which would get a bit tedious. I also learned that route matching can make using of string patterns and regular expressions instead of just basic hard-coded routes and route parameters. This can extend functionality quite a bit so i'll keep that in mind in the future.

