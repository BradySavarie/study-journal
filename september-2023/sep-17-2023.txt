I'm going to finish the MongoDB course today! Yesterday after finishing up the Atlas Search unit I decided to carry on and got all the way through the data modelling intro unit as well. I learned alot of interesting things in that unit.

The purpose of data modelling is to make data easier to work with by organizing it logically and to make accessing it more performant by creating models that structure the data in a way that is efficient to work with. A main point that was drilled into my head was data that is accessed together sould be stored together. There are a bunch of techniques that can be employed to make this work. You want to choose a type of data relationship (one-to-one, one-to-many, many-to-many) that best represents how the data will be accessed. For example, if you have a couple of phone number fields that are stored as a one-to-one relationship it may be better to create a contact field that stores an array of phone numbers (one-to-many relationship). These choices depends on the context of how the data will be used. 

Data can be either embedded or referenced. With the embedded model, you are nesting subsets of data directly within another document in order to maintain the relationship. Embedding data improves query performance and simplifies queries by only storing it within a single document. Referencing data on the other hand involves storing references to pieces of data that is stored outside of the document so that you can go retrieve it elsewhere. The benefit of this is avoiding data duplication and ensuring that file sizes remain small as the data scales (which could be very important because mongoDB can only store 16MB per document. Unbounded data could extend beyond).

Moving on now to learning about MongoDB Transactions. I have no idea what they are yet so this will be entirely new for me.

Well that was quick and eay. an ACID transaction is just a set of operations that must all complete successfully or none be completed at all. It's like an all or nothing scenario. An example of when this is needed is transferring funds from one persons account to another. The operations needed to do so is deduct from the first persons balance and add to the second. But if only one of these events occur and the other doesnt than the actual value is being affected inaccurately. The acronym ACID is broken down as follows: atomicity, consistency, isolation, and durability. Atomicity means a singl, indivisible unit of work is being performed. In the context of a transaction this is the all or nothing principle at play which ensures that the database is always in a valid state. Consistency means that the states the the database can be set to need to be consistent with any constraints that are applied to it. In other words, if an account balance is not allowed to be below zero than a transaction that attempts to do so will fail because it is not an ACID transaction. Isolation means that all operations in one transaction are isolated from any operations in concurrent transcations. If more than one transaction is happening to the database they cannot interfere with one another. Durability means that once the transaction completes it is permanently stored in the database and cannot be lost due to power failures or what have you.

Single document transaction in MongoDB are already ACID transactions by default since either an operation fails and changes are not mad or vise versa. Multi-document transactions however are not inherently ACID so steps need to be taken when appropriate to make it so. This is only necessary by the way when working with operations that absolutely need to happen together.. when that is not the case than it should be avoided.

To create a multi-document transaction with mongosh you need to connect to a database session and get reference to the collection(s) that hold the documents you are making changes to. You can then start a transaction on the session by calling startTransaction(). Once you complete the first write operation within this transaction it will automatically be cancelled within 60 seconds if not completed so you need to move fast. This must be a security feature. So go ahead and make the necessary changes by updating the documents or whatever (any operations that must have to be done together happen now), and then call commitTransaction() to signify that all of the operations are complete. You will see an output in the terminal indicating whether or not the transaction was successful. If at any point throughout the transaction you need to cancel you can always call abortTransaction() as well.

All done the course. That was a pretty good time overall. Glad that I have a nice foundation now in MongoDB and i'm looking forward to actually putting it into use on upcoming projects to soldify what I learned and get familiar with using the actual nodeJS driver rather than just the shell and atlas.

Next up i'm going to be studying Express! I've already spent some time working with the framework but this will be a good opportunity again to review what i've learned and gain a deeper understanding of it.