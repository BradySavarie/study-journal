Last night I had gotten up to part way through the fourth unit of the MongoDB course. The third unit was all about the MongoDB document model. We covered what the document model is, and then dove into how to create databases, collection, and documents within MongoDb Atlas. Not difficult at all to follow really. The neat thing about documents is that they actually store data in a format called BJSON, which is why it seemed so similar to JSON. This format is essentially an extended version of JSON that includes compatibility for extra data types such as ObjectID (which is what is used to store document ID's automatically), dates, regEx, etc. The B stands for binary, which means that the data is binary-encoded. This allows for quicker parsing and serialization of data than storing data in a string-based format like JSON. Serialization is just the process of converting data into a format that can be easily stored and understood by all systems by the way, which is beneficial when using different software programs, keeping the data in long-term storage, or transferring it over a network.

So far in the fourth unit we've covered what connection strings are and how to use them, as well as how to connect to a mongoDB atlas cluster using the shell. Moving forward now with the rest of the unit. 

I got a bit of clarification on what exactly the mongoDB shell is in the first place a moment ago. I didn't understand what a REPL environment is. Read - Evaluate - Print - Loop is what it stands for, and is a text-based way to interact with your runtime environment using it's language. So since I use node I am using a nodejs REPL environment when typing javascript commands into the terminal. MongoDB shell is built on top of the nodejs environment and allows you to interact with mongoDB using javascript. There's alot of different ways in which you can interact with MongoDB in the shell, but an example would be just by doing database operations such as CRUD or filtering and sorting. 

Finished up the fourth unit. It covered how to connect to a MongoDB cluster using MongoDB Compass and an application. Compass is a GUI that allows you to interact with your data in a visual way. Nice to have that option in addition to the shell. Atlas is also a GUI but it is cloud-based and focused more on being a hosted data environment than a tool to explore your data. There is some overlap in functionality but they serve distinct purposes. Connecting to an application is pretty straightforward as well (i've already done it for the little blog test project I worked through). You just need to install the mongoDb driver for nodejs into your app and then save your connection string. From there you can follow the drivers documentation to learn how to do a bunch of stuff with mongoDb. The connect method with your string as the input param is how you would actually connect to the particular cluster.

Made to 40% through unit 5. This unit covers how to use MongoDB to carry through CRUD operations. Right now i've looked at inserting an finding documents. For inserting documents you have 2 options: insertOne, and insertMany. Insert many just takes a comma-seperated array of documents rather than a single document. To search for documents in a collection you can use the find method. I suspect I haven't learned all of the ways it can be used so far as there should be a lof of different ways to query for documents, but i have covered by exact value (which would just be inputting a key value pair that mongoDB searches for a match of) and using the $in operator (which searches for any documents that match the key value pair but the value is an array of options of which any can be matched). The $in operators just says then that any values IN the following array are considered a match and the document should be returned.