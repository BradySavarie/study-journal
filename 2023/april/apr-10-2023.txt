Last night I spent some time reading through the aysnc/await lesson. Those two keywords in conjunction form an improved syntax for writing Promises. While chaining promises using .then() method is fantastic compared to using a callbacks based approach, it still does leave a bit to be desired as it pertains to reading the code synchronously. It makes it clear that one step happens after the other, but you are forced to write one chain after the other.

By defining a function as asynchronous using the async keyword you are returning a promise just as you normally would, but within the function you can use the await keyword to stop the code from executing until a value is returned just as you would with the .then() method. The benefit is in the way that the code reads, or in other words the control flow is easier to follow. Using try and catch blocks within an async function also can make error handling more straightforward.

This doesn't necessarily replace regular promise syntax all the time though, it is just more likely that it will optimise the readibility of the code by using it. An example of a situation where .then() would be more appropriate is when there are multiple promises that need to run in parallel. Say you are fetching multiple pieces of data from a server and don't want to do it sequentially since that will decrease performance. In this case you could use promise.all() and attach a .then() method afterwards. An additional benefit would only having to use a single .catch() error handler in this case too at the end of the chain. So yea, pros and cons, but async/await should be a default consideration. 

I just finished the async/await lesson in its entirety and feel pretty good about it. Time to put all this new asynchronous knowledge into practice and begin working on the weather app project. Not sure yet if i'll be logging journal entries throughout the process. It has been kind of nice to help me solidify the ideas i've been learning, so maybe acknowledging the problems as they come up via journalling would be a good call. We'll see.
