Last night I had made a new blank react project using Vite for the first time. I didn't get the chance to really explore the directory at all so that's where i'm going to start today. Once I have a good feel for what is going on I plan on pulling up a txt file and planning out how the memory-cards application is going to work. I'd like to make decisions on what functionality I want to accomplish exactly, then figure out which components I will need in order to make that happen. From there I can plan how i'm going to be using state and effects within the components in order to accomplish the desired functionality. Then I can map out which methods I should need to make everything happen. Once I feel confident with my planning I want to dig into integrating typescript with react. One benefit of Vite is that it configures typescript right away if you use react-ts as the template when creating the directory. I don't yet understand how to work with static typing within the react framework though so I need to get an understanding of that first off.

Okay, let the planning begin!


So far so good! I've mapped out all of the functionality as well as the components that I intend on using to make it all happen. Next i'll need to figure out what data needs to be kept track of in state vs out of state (so think a roundCount variable vs an array of character objects), as well as which component they should be tracked in. Should state be hoisted up completely into app.js for every variable? I'm thinking that I will make a separate file characterData to store the array of character objects which can then be imported into the main file to stop it from getting too bloated.

Once I have state sorted out I am going to think about hooks. What functionality can benefit from the use of hooks, in particular useEffect? One feature that I can think of now is the instructions component being render only once the app.js component first mounts. I believe this would be a use case for useEffect with an empty dependencies array to 'simulate' the behaviour of componentDidMount in class-based React. In addition to using side effects via the useEffect hook I would like to implement useContext to help pass data through multiple levels (or contexts) without having to pass it as a prop at each stage. This will likely clean things up significantly so it's important that I keep it in mind when writing this app.

I've just run into a really awesome api site while looking for simpsons images. It didn't contain images for simpsons characters, but it did have an awesome list of movies (with unique endpoints for different genres, of which classics seem to be my favourite) that contains a poster image for each movie! I think i'm going to be changing up the theme now to class movies instead so I can get some practice fethcing from API's and using async code. Great opportunity. I mean, it even has a code snippet showing exactly how to query the API for React apps.