Yesterday turned out to be very a very tricky session! I was up late focused entirely on trying to setup the dark mode functionality that toggled the mode on click. Turns out it is more complicated than I anticipated. I still don't have it worked out. The problem that i'm currently trying to overcome is that the colorMode value seems to toggle appropriately when I test it, and the icons conditionally render just fine so that confirms it, however my theme will not update the colors based on the mode.

Holyyy! 12:20 and I finally have a working dark mode app haha. Very tricky to get it right (lots of typing errors) but it is really satisfying to have it work. All I need to do is decide what custom colors I want to use and I will be able to plug it in and have everything work seamlessly. I needed to use a ton of help from online resources to get this going though so I want to walk myself through everything in detail as if i'm explaining it to somebody to make sure that I actually understand how to do this again on my own. My brain is pretty fried now though so I am going to start tomorrows session off with a that recap.

So there are 3 main pieces to making this color mode functionality work with react and mui. First of all you need to have an actual theme object ready to go that contains the values you need for both the dark and light theme. These values have to be custom as well to have free reign over your design. To do this i've created a theme module that exports a function called getDesignTokens. This function takes the current mode as input and returns a Theme object that contains values that are conditional on what the mode is. So the light mode Theme object would have a different set of values stored in it than the dark mode.

Next up is coming up with a way to actually use the color theme that has been created. To do this you can create a useColorTheme hook. This hook will return the theme object that matches the current mode, a mode variable itself, and a function that toggles the mode. The mode state then is managed within this hook because whenever you want to use the color theme you will want to be accessing it's current value. The mode state is initialized to light and the toggle function just changes it to either light or dark depending on the previous value. Pretty simple. Managing the theme object is a little more clever. What we want to do is call the getDesignTokens function with the value of the mode to get the current theme object and store that in an object called modifiedTheme. This object is then exported and used in the application. The catch is that we want this theme object to be modified every time the mode changes, so what you can do is memoize the object by wrapping it in useMemo. The callback for the useMemo hook will trigger whenever the mode changes by including the mode in its dependencies array. The callback itself will use mui's createTheme function with the return value of getDesignTokens as input. getDesignTokens will of course receive the value of mode as input so it returns the relevant object. 

Okay so now we have access to a Theme object that is updated everytime the mode changes, and the mode can be changed via a toggleColorMode function. We need to provide this theme object to our whole application now so that it can actually be used. We do this using context. To be continued..