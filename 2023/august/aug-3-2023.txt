Last night I watched a lengthy video on accessibility devices and techniques that people with disabilities use to access websites. It provided some insight into what kind of accomodations I need to be prepared to make with the sites I build. Throughout the day today I had finished the lesson on accessible colors. The only information that I need to really keep in mind is that contrast matters, and it is measured as a ratio. The ratio is determined based on the difference in brightness levels between the foreground and background colors. To conform to AA standards of the WCAG you need at least a 4.5/1 contrast ratio. You can measure contrast using chromes dev tools just by hovering over the elements and selecting one that includes text. The contrast will be listed there. Alternatively you can paste the hex code values into a contrast ratio tool online, they exist out there for free.

I also covered most of the semantic html lesson today, but I need to go through some videos to finish that up. That's where i'm going to be starting this evening. Once that is done I am moving on to the keyboard navigation lesson (which is nice because I use my mouse for website navigation almost exclusively).

Okay so i've completed the semantic html and keyboard navigation lessons. I took some time while learning about semantic html to actually familizarize myself with how VoiceOver works, which is the native screen reader on mac OS. It is pretty simple, you just boot it up and use a relatively small selection keyboard commands to navigate through the pages content while the voice reads it to you. Once you learn the keyboard commands it would be really easy to use. I understand why semantic html is really important now after using the screen reader because it greatly increases efficiency in navigating through the website. You can use a feature called the 'rotor' to navigate based on things like headings or different landmark roles such as 'banner', 'contentInfo', etc. This makes things much more understandable to somebody that cannot see the webpage and has to rely on the data that the screen reader spits out. Not to mention it just makes for a better website design to use these semantic html tags because it is more logical and easier to parse through the code for other devlopers too. I can't think of any drawbacks to becoming familiar with all of the possible tags out there. I mean there is really only 7-8 landmark tags anyways: header, nav, main, section, aside, form, article, and footer. Obviously there is more to it than that, but the complexity isn't overwhelming or anything.

Keyboard navigation is also as simple as being aware of tab order (or in otherwords placing your elements in logical places in the markup so that the user can press tab and have the focus adjusted in a logical way). Focus is the only real way for keyboard users to interact with webpages so it is critical that it is considered as an important means of site navigation. When the user tabs through the elements it should read like a well-structured book. Providing skip links can be nice as well, right on the top of the page so that a user can navigate directly to the important content without having to sift through a bunch of other stuff before they reach it. 

Next up I will be learning how to make text more meaningful, what ARIA is and how it works, and how to audit a11y to ensure it is being used properly. That will conclude my basic overview on accessibiliyu, in which case I will be prepared to put it into practice. I can always dive into it deeper if my employer requires it or i'm actually deploying a site that may have users with disabilities interacting with it.