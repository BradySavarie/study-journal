Last night I worked through the remaining Git lesson that taught the standard workflow for contributing to open source projects. I learned about the 'git triangle' concept, which describes the relationship between the upstream, forked/origin, and local repositories. Pretty neat stuff. The contributing process goes like this:

Find an open-source github repository that you would like to contribute to. Fork the repository so that you have a remote copy of it in your github called origin. Clone the remote forked repository (origin) onto your local device so you can work on it. Before starting work, create another remote branch called upstream that points to the repository that you are contributing to. You can't push directly to this repo because you do not have write access, but you can pull data from it. Now you are ready to work so you can create a local feature branch and make all the necessary changes to it. You can assume that your local copy is out of sync with the upstream repository because it is likely that changes have been made to it by other contributors while you were working on your feature. Before pushing any changes up to origin you are going to want to fetch the data from the upstream repo and merge it into the main branch of your local repository. Since your feature branch is considered 'dirty' at this point (it may contain merge conflicts with main) you are going to want to merge main into it instead of the other way around. This ensures that you have a conflict-free merge process ahead and is good practice anytime you are merging into more senior-branches. Resolve any conflicts that arise now. Your feature branch is now considered clean and will merge into main, therefore you are good to push the branch up to your remote repository origin and submit it as a pull request to the upstream repo. 

Little side note: it seems counter-intuitive that you want to push data to a repository yet are submitting a pull request to do so. The reason for this is because what you are actually doing is requesting that the owner of the repository pulls your data into their project.

I have been having some fun going through the introduction to React tutorial. I used create-react-app to build a react project directory based off their template and poked around in all of the files contained within it. Lot's of the stuff included there is working under the hood so to speak. I noticed that webpack, jest, typescript, etc. are all included when create-react-app is executed however it is not explicitly listed in the package.json file. There are is a start script that runs a dev server, a build script that bundles for production, a test script to run your tests, etc. so everything is reaady to go but doesn't require any thinking at all really. Kind of neat as it will really speed things up, however I feel iffy about not explicitly seeing what is happenening in my project. Losing a little bit of control isn't ideal but probably a good trade-off overall. I did some research last night after hearing the create-react-app is basically dead now and came across Vite. Apparently this is recommended as an alternative because it doesn't have to rebundle everytime you make changes. Instead it leverages the fact that all modern browers support ES modules natively now and therefore can provide lightning fast build times using hot module reloading rather than rebuilding the whole project everytime you update a file. This is interesting for sure, I think i'm going to take it for a spin sometime in the near future. I spent alot of time and effort learning Webpack though so it's a bit bittersweet to find out there is a better tool out there for bundling. It also has built in typescript support which is nice. It doesn't do type checking during development though, only once it's in production. The idea is that your IDE and browser will already be doing that for you anyways.

Fun fact, I am 69% done the Javascript path in the odin project haha. Somehow the Battleship project was only 1% of the journey yet it is where I believe i've learned the most.

Alright great so i'm on the assignment part of the React introduction now. I've got to read a few sections of the official documentation to get familiar with all of the basic concepts in the framework and watch a selection of videos to reinforce the material. The additional resources section looks interesting as well. I've installed the react dev tools into Chrome so I should also go through some tutorials on how to use it properly once I have a better grasp of how React projects are built. This is fun.