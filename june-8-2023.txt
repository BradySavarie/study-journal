I'm excited to get to work tonight. I have a few challenges to face in regards to extending the functionality for the task-app. 

Throughout the day I read three sections in the React docs: conditional rendering, responding to events, and state: a components memory. Each of these contained some useful information. Conditional rendering is just simple control flow logic that I use all the time but inside of a return statement. React renders the contents of the returned jsx. Conditionals that are often used include if/else statements, ternary operations, and && operations. The && operator works a little bit differently than I thought. Typically I use it to verify if multiple values are true, however in the React docs it is used to evaluate if the left side of the operation is true and if so it returns the right side. So in the statement {isLarge && <h1><I'm Large</h1>}, if the isLarge variable is true the header will be returned. If it is false than the statement will return void which creates a hole in the DOM and signals to React that the statement should not be rendered at all. Pretty useful.

Responding to events is straightforward as well. Basically just adding event handler functions to jsx elements as props. I do wonder how event delegation is handled as attaching a unique event to each and every component seems like it may be messy. I should look into that. Once the handler functions are called using jsx attributes that relate to the event in question things can be done as normal, such as using e.preventDefault() or whatever else inside the handler. You can also stop the propagation of the event, barring it from reaching it's parent element in the case that it isn't necessary for the event to bubble up the tree.

Finally the section on state was pretty good too. It used functional components as examples (it seems like class components are a legacy code kind of thing to me, I wonder how handy the syntax will actually be. Either way it is more involved so it's good to know in case I run in to it). I learned a bit about how React updates state internally and how to use the useState hook to provide a state variable and setter function for it. This setter function triggers a re-render when called so that the updated state is used. Something important that I learned about state is that they aren't just normal local variables. Local variables do not trigger a render on change and the data does not persist between renders. 

Okay so today has gone alright. I have learned quite a few nuances of using React while trying to extend the functionality of the task app. It turns out strict mode renders everything twice in an effort to cathc errors, and I was using a console log statement inside of the render function. I kept seeing it log twice and was confused as to what was going on. Thankfully some guys in TOP discord chat pointed me in the right direction. At the same time I was seeing an error explaining that keys have to be unique still when putting the task-id's into the key property of each list item. I figured whatever was causing the console logs to run twice was also probably causing the tasks to be parsed twice, but it turns out both errors were unrelated. I was trying to pass the same task id into both the button and the list item within a jsx fragment, and so React saw the id being used twice as a key and flagged it as an error. To fix this I instead added the key to the fragment that grouped both elements together.

