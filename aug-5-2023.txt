today i'm finishing up the aria lessons additional resources. I want to get more familiar with the concepts via repitition. In addition to that i'd like to start into the lesson on accessibility auditing. I think it will be nice to know exactly how to approach testing my site for a11y rather than just trying to remember all the different steps that I could take. I heard something about a plugin that ensures a website follows WCAG AA compliance kind of like how a linter would work, so that would be a nice tool to have.

In this seciton i've been learning about how to use the accessibility pane in devTools, as well as how to use Lighthouse (the built in auditing tool for chrome). The accessibility pane shows the accessibility tree, aria properties, and computed a11y properties of DOM nodes.

I finished accessibility and have started tackling the responsive design section now! I find this one more interesting since I deal with responsivity issues all the time and would like to improve at it. Overall I found that the a11y section made me appreciate the concept and why it's important, and it also gave me a better foundation to work from for when I do need to take it into consideration. I don't think it's going to be something that I spend alot of time accounting for in my projects though unless I intend on deploying them because it seems to be alot of extra work for a questionable amount of return. I want to be accomodating towards those with disabilities of course but there is also a cost associated with spending a bunch of time working on it. That being said, I learned enough to know how to integrate a11y into my development process without making additional work necessary in the first place which is a great first step towards improving at it. For example, I can pay closer attention to writing semantic html that I know screen readers will have an easier time parsing. I can also make a11y friendly design/content choices such as high contrast text, less complex language when possible, etc. Being aware of the concepts is a good thing for sure, and when I decide I want to spend more time on improving the accesibility of a site I can always use my devTools to audit it and move forward from there. Not too bad. I guess a11y is similar to testing in that it is a best practice that provides a lot of benefit but can be a bit on the tedious side. At least that is how I currently see it, hopefully I come across some situations that emphasize the importance of it so I can be more sure of myself when putting the extra effort in! 

Anyways right now I am learning about natural responsiveness. HTML is naturally responsive, css is what causes elements not to be. Therefore, bad resonsiveness is a result of decisions that I make as a developer. If I learn to make better choices than there won't be that much extra work involved in keeping a site responsive. I just need to learn the proper techniques. I do have some experience at this point designing responsively so I feel like I am not too far off of being confident with designing for mobile and desktop screens, I just definitely need to learn some more techniques to ensure everything stays flexible. In particular text and images, I tend to struggle there.

Natural responsiveness lesson is complete! It will a nice review of concepts i've studied in the past. I covered why using fixed widths and heights is generally not a good idea, while also looking at the unique use-cases that may call for it (elements that have dimensions that should never change, such as an icon perhaps). HTML is responsive is nature, you just need to know how to use it. Block-level elements take up full-width, inline don't. You can use flex box or grid to take control of any elements that don't naturally behave how you want of course, but don't set a width of 100% on a block level element for example. 

A great concept that was included here is the common pitfalls of trying to work in percentages when it is not the best approach. I fall for this all of the time. I often will set the width of an element to say 80% of the viewport, but when you scale that element the margins change as well which can look funky. A better approach would be to use a fixed margin so the design looks consistent as it scales! This is a nice insight for me. When the margin doesn't work for a particular screen size than I can just use a media query instead. The result is definitely better, confirmed with a codepen example.

I also looked over a responsive grid columns approach again that is really clever. I've used it in the past but haven't reached for it much. Set the grid tracks to repeat using auto-fill so that the number of items is based on the size of the grid and the items within it, and then use minmax to set these size of the items. grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) for example would create a grid with x number of columns (depending on how big the grid container is) with elements that are no less than 200px wide and no more than 1fr wide. 1fr representing the division of available space as calculated by the repeat auto-fill.