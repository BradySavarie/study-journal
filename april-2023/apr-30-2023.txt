Today i've spent a few hours in a coffee shop working on the knights travail problem. This is definitely going to be a more complicated program to write than I had given it credit for, which is excellent because it gives me the opportunity to learn. Got to keep that positive outlook haha. What makes it particularly challenging for me right now is that I need to use the concepts of graphs to map out all of the relationships between the possible moves that the knight could make. 

An 8x8 chessboard contains 64 squares, and the knight should only visit each square a maximum of one time. The knight will start at a given coordinate and traverse through the chessboard breadth-first. To facilitate this, an adjacency list will be created that stores all of the possible coordinates a knight can travel to for each square on the chessboard. The start coordinates will be the root of the graph and the end coordinates will represent the target square that is being searched for.

A queue array will be initialized with the starting coordinates. A 2D visited array will be initialized with a value of false for each square on the chessboard. The purpose of the visited array is to track whether or not a specific square has already been visited to ensure that no square is visited more than once. A parent array will be initialized with a value of null for each square on the chessboard. The purpose of the parent array is to store the coordinate that was visited before it so that the shortest path can later be retraced.

The search function itself will begin by initializing a while loop that runs while the queue is not empty. It will remove the first coordinate pair in the queue and destructure it's elements into currentRow and currentColumn variables. These coordinates will immediately be used to index into the corresponding element of the visited array and change its value to true. Next an if statement will chcek if the currentRow and currentCol matches the endRow and endColumn variables. If so, the while loop breaks and we move to the next section. If there is not a match then we loop through each element of the current row and columns adjacency list. The loop checks if the coordinate has been visited, and if not then it sets that coordinates parent value to the current coordinate and pushed it into the queue.

The above steps repeat until a match is found and the while loop breaks. At this point an empty path array is initialized to store the parent coordinates of each vertex starting at the end coordinate. a currentVertex variable is initialized to the end coordinates. while the currentVertex is not null, a while loop unshifts the currentVertex into the path array and overwrites the currentVertex value to that vertex's parent coordinates. Eventually this chain ends and the result is a path array that stores the shortest path. This path is then finally returned.

Damn, that is a beautiful progam. I may look back at this entry one day and think "ha. simple" but at the moment this has kind of blown my mind how sleek it is.

Okay, I have the concept broken down real good now. Time to actually implement in in javascript.

Step 1: Given a coordinate pair representing a position on the chessboard, create a function that generates an array of coordinates that a knight could possibly move to.

Step 2: Create an adjacency list that contains the coordinates of all possible moves that a knight could make for each square on an 8x8 chessboard.

Step 3: Create a function that returns an array of coordinates representing the shortest path a knight could take to traverse from a given start point to a given end point.

Substeps of Step 3

    Step 1: Create a 'visited' array that stores the visited state of each coordinate on the 8x8 chessboard in boolean values. True if knight has landed on it previously, false otherwise.

    Step 2: Create a 'predecessors' array that stores the coordinate that a knight was on before it moved to the current coordinate.

    Step 3: Implement a breadth-first traversal that updates the visited status of the current coordinate, stores the predecessor to the current coordinate, and checks if the current coordinate is equal to the end coordinate. 


Unrelated to the above, I just went through my github repos and noticed that i've been slacking on keeping them at a high quality. I want to make it a point to go back and ensure that the readme's are completed, that each webdev project has a gh pages link for potential employers to follow, and are generally better organized. I am still considering moving all of my data structures and algorithm repos into a single repo for better organization and I want to move the components repo into the projects directory.