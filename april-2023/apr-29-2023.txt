Okay time to get going. I am at Salute and i'm going to stick around until I have the isBalanced and rebalance functions for the binary search tree created. I'm not expecting the difficulty level to be too high, let's see if that holds up.

I have yet to do the rebalance function, however i've made alot of progress regardless. I've decided that I want to showcase my ability to do data structures and algorithms to employers so i've moved my this BST repository into my projects, pushed it to github, and started writing a readme to describe the program. I've also spent some time reviewing and refactoring the other methods to make them more efficient and ensure that I understand precisely how they work. I'm considering doing the same thing to the linked list repository, i'm not sure why I decided in the first place to keep it stored in my practice repo. I suppose neither are necessarily web-dev based but it's still something that many employers could be interested in seeing. In addition to this, I could create a directory for data structures and and a directory for algorithms instead of unique directories for each project. I can then add in my related projects as I go. Doesn't seem like a bad idea.

Okay didn't so that yet because I want to research how my existing remote repos will be affected if the local is moved around before actually doing it. Don't want to screw that up. I did however do a lot of refactoring on the binary tree by reading other solutions and finding ways to optimize the methods! The rebalance function is written as well, however I have yet to figure out how I am going to test it... Whenever I build a tree using my buildtree function is comes out balanced regardless of whether or not it is sorted because it is always recursively divided by at the middle of the input array.

Alright the binary search tree is done! I've modularized the project and refactored quite a lot of the code today. I've moved all helper functions inside of the Tree class so that it can be a single export, then used them in a separate driver script file that imports the binary tree module. The node class is also separated out into its own little node.js file which may be a little overkill but it allows for one bigger export rather than two.