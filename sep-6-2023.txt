Received some great feedback today on the portfolio site! Someone really took their time to point out the flaws that they noticed and one comment in particular was very helpful. Turns out my site looks horrible on desktop screens! I've only be designing for laptop size and below apparently. My goal is to figure out how to design properly for those large screens as well. Other comments were to have the animations only run once, reduce the text in the home page to a single sentence or two if necessary. Remove technologies from the technologies section that aren't being demonstrated on portfolio projects (could set off red flags). I thought my portfolio was a real banger haha so this feedback took me down a notch but man it is so nice to have someone provide that kind of value so I can fix it. Otherwise employers would have definitely been seeing all of those mistakes.

I will be coming back to that in the future when I intend on using the site. I've spent alot of time putting it together a need to move forward on to something fresh to keep momentum up. Tonight i'm charging forward with that nodejs series. Hoping to make some solid progress.

Cool so i've learned quite a few things about working with node, albeit at a very basic level. I learned about what request and repsonse objects are. Request objects are what is received by a server when a client sends over an http request. It contains loads of information within it related to the request. You can use it to decipher what exactly the client is asking for and pull information that might be helpful in providing that. The response object on the other hand is what the server sends back to the client in response to its request. You can specify things like the status code, content type, etc using it. It's the tray that the chef puts all of the food on when serving their dish to a customer.

Using these objects in pretty intuitive. First things first of course you will need to set up a server which can be done in javascript using the http module and calling the createServer method. You then need to make sure you that the server is live by calling the listen method on it with the port number that you want it to be locally hosted at. Now requests and responses can be sent and retrieved by the server and used in various ways. 

A quick example of how this can be used that includes basic routing and html handling:

We want to write up some code that sends an html file to the client, but the html file to be sent will depend on the url that the client is requesting. We have a home page, an about page, and a 404 page. 

The server receives a request object from the client. We first set up a path variable with the value './views/' assuming that all html files are stored with the views directory. Next we can set up a switch statement that uses the value of req.url as it's input. We can set up 3 cases: when the url matches the home page url (just a '/' symbol to represent the home path), the about page ('/about'), or the 404 page (default case, when no other paths match). When the each path is matched we append the corresponding file to the path variable. For example, the request url is '/' which matches our home route. We append 'home.html' to the path variable. We can then use the file system to read the file at that path and write the results to the response object. We do this like so: 

fs.readFile(path, (err, data) => { 
    if (err) {
        console.log(err)
        res.end()
    } else {
        res.statusCode = 200;
        res.end(data)
    }
})

This example demonstrates basic routing and serving an html file to a client. I learned how to redirect a page as well which just requires setting the header location to a different route. It is kind of verbose though to do all of these things for each possible file, especially as the project grows in scope. 

Enter Express! I started learning about this framework today which is designed to make nodejs a breeze to work in. It really condenses the syntax to make the same types of operations as above for example much more readable and quick to write. 

