Left off last night with configuring the webpack dev server with typescript. I've always had trouble getting it running in the first place and i'm not sure what the deal is so i'm going to spend some time trying to figure it out now. Once that's done I can work on the battleship application some more.

Okay a little trial and error and it looks like I now have the development server working. I'm going to walk through it here to make sure I understand everything that is going on. I started by specifying that webpack is using development mode to enable all the important development features. Next I set my entry point to be the src directory. After that I had created a modules option to insert some rules. The rules stated that only files in the src directory will be included in bundling, they will have to end wit the extension .ts, and the ts-loader will be used to transpile them in javascript so webpack can understand it. Next I setup the output options which basically just the absolute path to my dist folder, named the file main.js, and set the publicPath as '/' so the dev server will know to access the assets using the output folder (dist) as the root directory. Setting up the dev server required creating a dev-server object with properties static, compress, and port. The static property allows static assets (like the index.html file) to be served even though its not processed by webpack. I had to set its directory option to the dist folder to ensure i knew where to find the static assets. The compress option tells webpack to apply gzip compression to the files it serves which reduces the sze of the data transferred over the network. This results in reduced network bandwidth and therefore improved performance and loading times. Only downfall is that it requires more CPU power from the server but in dev mode the pros typically outweigh the cons. Finally, the port option just specifies the location at which webpack dev server will be looking for incoming requests. When you save you are making a network request and this request happens at a specific port. It defaults to 8080, but in this case i changed it to a standard dev server port of 3000 to avoid potential conflicts of another service already running on that default port.

Okay i've completed the webpack setup now along with the webpack/typescript tutorial series! Cool, that was a nice little detour. After configuring the dev server I had also enabled source maps to make debugging easier. I am using the eval-source-map in particular because it supposedly generates higher-quality maps that contain information about which line the error is on (at the expense of larger source map files and thus reduced performance). 

Time to actually get coding now.

Yikes that was rough haha. Spent alot of time writing tests and messing around with the logic of the placeShips method and ended up finding more bugs than anything with it. Will need to focus here tomorrow.