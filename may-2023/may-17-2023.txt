Okay so last night was pretty tricky. Todays goal is going to be focusing entirely on the placeShip method. I am considering using a helper function inside of it called validatePlacement instead of writing all of the logic purely inside of placeShip. Less talk more code.

IT WORKS. Yea boyyyy that was fun. I decided to create the validatePlacement method to move the validation logic into. It is a private method on the gameboard class. To check if the ship will collide with any existing ships i used an if/else statement to ensure the method operates correctly based on the ships orientation and then looped through the length of the ship to see if any coordinates in the shipPositions array that the ship would land on contained any values besides null. I returned false if they did to indicate that it is not a valid coordinate. To check if the ship extended past the length of the board is just used another if/else statement for orientation, summed the col/row value with the ships length to get the total space on the board that is taken up, and then compared it against the boardsize. If larger than it wont fit on the board and I return false.

The return value of the validatePlacement method gets stored in an isValid variable, which is false placeShip also returns false to indicate that the ship was not placed. If true then the index number of the ship is inserted into the appropriate coordinates in the shipPositions array and true is returned to indicate that it was placed. Not as complicated as I thought it would get really. tests all pass as well which is nice, however I do wish I was a bit more diligent with writing them before writing the code. I did good there for the mot part but started to lose patience a little towards the end of writing the method out. I can verify though that writing tests is very very helpful! I would have almost definitely been dealing with bugs if I hadn't had the tests to show me that my logic was not working for all cases.

Time to continue planning what my next step will be with this application. now that the ships are placed. 

I think a good next step could be to write the receiveAttack function. That should be straight forward enough, I already have an array prepared to store the values as they are updated. Once that is done I can create the Computer class that has a basic 'AI' to generate random coordinates. Once that is ready I can start writing out the turn-based logic, starting with game initialization so the index.ts gets filled up.