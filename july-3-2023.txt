Today i've been studying MaterialUI in a little bit more depth to try and really understand how it functions. I am opting to go through a video series before proceeding with completing the memory-cards application just so I can feel more confident with the new technology moving forward. Something that i've learned so far is that MaterialUI already has built in functionality for customzing components and therefore integrating styled-components with it may be a bit over kill at the moment. I have it all configured but I think I will try to understand how MaterialUI is intended to work first before switching over to another workflow option.

The subject matter that I am covering so far is how to use MaterialUI from a high-level perspective, as well as diving into a set of specific components. I have learned about creating a theme which is super important. Every component within mui is given a set of default styles that conform to googles Material Design principles. A theme object exists that stores a collection of values that relate to those design principles which are then applied to the components. You can easily customize the theme by using the createTheme hook and passing in an object that overrides specified keys with whichever values you choose. For example, you can access the palette object and drill down to primary.main to change the main primary color of your application. This reminds me alot of styling with Tailwind as there is a whole design system in place ready to be used and overridden at will, but with the added benefit of having prebuilt components ready to go. Each component has a set of unique props that can be used to set certain values easily as well and can be viewed from the component api section of the mui docs. The typogaphy component for example contains a variant prop that allows you to choose which typography variant you want to use (h1, h2, etc). At first I thought this seemed verbose and unecessary, why not just use regular html tags? The answer is that by using the mui component it can now use themes which means you only have to make one change to affect all instance of the typography with that variant selected. It would be a pain to do this with regular tags because you would need to use a very low-specifity selector (just the tag itself) which could result in quite a lot of specificty issues, or alternatively make adjustments to each instance manually. Using the components solves that problem which is great. 

Previous versions of mui used a jss styling engine for writing custom styles, but it has since migrated over to Emotion as the default engine which can be switched to styled-components as well if desired. A popular way of applying styling in the past was using the makeStyles hook that allowed you to create an object that contained css classes with custom properties. You would then just apply the class name to the jsx element and those styles would be applied to the element. This is nice to keep the jsx from getting cluttered and closely resembles writing normal css if you ask me, but it was depracated because the hook was dependant on the JSS engine. An amazing prop that was introduced in mui v5 is the sx prop. It provides a new solution, which seems better, to adding custom styling to components. For small amounts of css you can use sx to write inline-styles basically, but the benefit is it has a bunch of shorthands available for css properties similar to tailwinds utility-classes (p for passing, m for margin, etc) and it is also theme-aware so you can access any of the theme properties from within it. This could however clutter up the jsx quickly so for bigger components you can use the styled() function to add styling to a component instead using the styling-engine. In the case of my current project I would create a custom styled component file and import it into the file that I would like to use the styled components in, which is probably app.js. Pretty flexible solutions to both extensive and simple styling needs!