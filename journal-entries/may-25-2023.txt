Okay, it's getting pretty late so i've only got about 2 hours max today to work. I think in that time i'd like to get the randomize button working, and if that doesn't take up too much time than it would be great to start in on the logic for the initial render of the in game screen.

Well the randomize function wasn't nearly as tricky as I thought it would be, only took me about 50 mins to wrap up. I just had to reset the ship positions array to its initial state and then loop through each ship generating random row, col, and orientationChanged values. I then rotated the ship if orientationChanged is true and placed the ship at the new random coordinates. This had to be done in a while loop to ensure succesful placement of each ship of course. After that happened I just reset the validity states and ran the gameboard render function and everything was good to go.

Time to plan out how the start game button will function:

* Note that the start game button will notify the game controller module via event listener that a new game is starting. This function will in turn communicate with a new battleScreen view module and whatever other model modules it needs to prepare the game for user input.

    - listen for clicks
    - when clicked, validate that all ships are placed on board
    - if true call renderComputerGameboard

    - replaces inner html of main__placement-controls container with a container to contain the computers gameboard
    - dynamically render computers gameboard to the screen
    - Display an instructions header/footer to tell the player to click to shoot their cannon