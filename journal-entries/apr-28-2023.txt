yesterdays work ethic was... questionable. Fell asleep after maybe 40 minutes of working on the delete function. Not proud of that so i'm skipping the bars tonight and starting to conquer this binary tree nice and early. Got an americano in front of me and im not afraid to use it.

So I had managed to create the majority of the function before passing out. It is a recursive function that takes a value as input and searches through the tree until it either hits the base case(a node with a null value) or the value matches an existing node within the tree. If the base case is reached the root is returned. The root is returned instead of null because the root of the tree being searched is set to the return value of the function. If null would be returned by the base case the entire tree would in essence be deleted. If the value is matched we first check if it's a leaf node by seeing if both of its child values (left and right) are null, then we check individually if only one child is null to see if perhaps the node is a single child node, then finally its assumed that it is in fact a two child node and a script is run. If it happens to be a leaf node then null is returned to ensure that the node in question is removed entirely. If only one child is found to be null, the opposite child gets returned because that is the value that you want to replace the node with when deleting it. 2 child nodes is more complicated and that is what i'm currently working on now. Will report back once I lock it down.

Okay so the idea for deleting a two child node is to replace it with it's inorder successor. The inorder successor is the minimum value node in the right subtree of the root. So basically traverse to the right and then continue traversing to the left until a leaf node is reached. Replace root with said leaf node and then delete the leaf node.

NICE. I got the method working (with alot of help from external resources, but still I understand it so whatever). I used a helper function to return the minimum value node and passed in the right node as input for it. I then replaced the value of the node to be deleted to that minimum value. Once that was done I still needed to remove the min value node so I called deleteNode using the min value and right node as input. This traversed down the right subtree finding the min value node which was then set to null using the base case since it's a leaf node. Does that make sense? I think so... basically I replaced the node with the inorder sussessor. Boom.

That was awesome, what a fun little problem to sort out. Recursion is mind-bending in a fantastic way. Time to move on to some more methods.


