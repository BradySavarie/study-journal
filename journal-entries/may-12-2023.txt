I got pretty stuck yesterday with trying to write typescript. I think before moving forward with the application logic I will increase my understanding of the nuances of the language. Most notably I want to know how to use class syntax properly.

I've just learned how to define function types and work with type aliases. Function types can be declared explicitly or inferred. If it does not return a value than the return is inferred to be void, hoever it can also be declared that way. If it does return a value and that value is stored in a variable than the type of that variable can be inferred as well rather than declared. This saves a little headspace.

Type aliases just the use the Type keyword to let typescript know that we want to make a new type called 'x' and then give is some fancy combination like an object with parameters with union types for example. Using type aliases can help reduce code since you only have to write out the type information for complex types a single time and then reuse it a bunch.

Type signatures was next on the list. Pretty interesting, it's basically just defining a template for the input and return types that a function needs to use in order to be valid. For example, a function could be given a signature that takes two parameters: first is a number, second is an object with a name parameter that is a string. The return value is void. Now whenever that function is called the input and return types of the parameters passed in must match the functions signatue otherwise it is not considered valid typescript. 

DOM interaction and type casting. Interacting with the DOM is almost the same but with a couple little gotchas. When selecting an html element a type is assigned based on what kind of tag you are selecting. For example, selecting an anchor tag will result in a type of HTMLAnchorElement. One reason that Typescript includes these types is so that it can provide intellisense for all of the different methods available to them for you. Trying to access a method of a tag will result in an error though whcih seems counterintuitive. Basically, typescript doesn't know whether or not the tag exists at runtime or not thereore the value could possibly be null. It doesn't have access to the index.html file yet since it interacts with it via the DOM. The error is warning you that 'hey, maybe this thing that you're selecting doesn't exist'. If you are certain that it does in fact exist you can put an exclamation point after the selector to signify to typescript that you know what you are doing and to remove the error. The error itself is helpful though to have on by default because what if you actually do select something that doesn't exist? Catching that little bug would be more difficult.

If an element is selected via class or id (or something that doesn't clearly indicate what kind of element is being selected) than typescript won't know the element type. A type of Element will be assigned to indiciate that it is an html element but it is not sure what type. The concept of type casting was born to combat this. You can use the 'as' keyword to specifiy the type of some element after selecting it. For example you can select an item by class name and cast it as a number. If you cast the type incorrectly you may experience runtime errors and unexpected behaviour so it's careful to be wary of casting types correctly.

It's getting late now so i'm going to head to bed even though I only got an hour in today. Busy time with that business trip but hey at least I squeezed some knowledge into my brain after all. Tomorrows goals is to finish up the typescipt series on Youtube and begin applying it to my battleship project. I'm excited, especially since the next video is about classes which directly pertains to my project.