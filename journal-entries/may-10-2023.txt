Last night I had started making decisions on how to split up the code for the battleship game. I have some model, view, controller directories ready to go and have started figuring out which files will be contained within the model directory. So far im working with ship, board, and game modules. They each store and manipulate the applications data. The ship module has a ship class that contains properties and methods that help with creating and updating ship information, the board module handles all data that is related to the gameboard, and the game module handles information that is directly related to the state of the game itself.

Todays goal is to hook up a remote repo for battleship, continue configuring typescript and jest, and start writing up some tests for the models so that I can begin fleshing out the logic of the game. I'm hoping that throughout this process I will get a clearer picture on what problems will need to be solved to get this application working so that I can refine the pseudocode and begin coding.

Okay so far the repo has been created and i've done some research on configuring typescript. Im installed the typescript compiler globally so I can use it for all future typescript projects without having to include it in the package.json files. i've used it to initialize a tsconfig.json file in the battleship directory and i've tested out compiling the index.ts file in javascript. Everything seems to be working so far. I now want to learn how to optimise the typescript config for my project which will involve quite a bit more research. May decide to put a hold on building up battleship until I understand how this all works. Either way it is time well spent, no rush to finish this project so long as i'm learning important stuff along the way.

I've learned a bit about Typescript now! Having a fun time. Currently running through a YouTube series that explains how to use it in detail. As of now I know how to setup and compile typescript files, I understand the basics of how static typing works for primitive data types as well as objects and arrays, I get the difference between implicitly and explicitly assigning types, and I know what union types are. The initial impression that I am getting from this language/superset is that it is opinionated but not limiting. It forces you to make intentional decisions so that you avoid making type-related mistakes. This will definitely reduce bugs, I just need to be aware that sometimes very small projects will not see much benefit since the configuration may take more time than any potentiala debugging would. Small tradeoff, big reward when the use case fits. Moving on now to dynamic types and then following that up with exploring the tsconfig in a bit more detail.