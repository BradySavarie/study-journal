I finished up the git lesson yesterday and ive let it sink in a bit today. I understand branching a whole lot better now. I have a good grasp on merging and rebasing. In addition to that I know how to amend and edit commits (the most recent and/or any in the repo history), and howt o reset and revert them. Feeling pretty good about that lesson. I'm going to try and get the first lesson in the testing section done now, I figure it can't hurt to run through both sections at the same time considering they address entirely different topics.

I have watched a video that discussed in detail why testing exists and I feel like I have more of a reason to focus on it now that I have an idea of why it is useful. Even though a certain piece of code may be simple, that doesn't mean it can't quickly grow in complexity. Having tests in place to ensure that the increasing complexity of my code does not overwhelm me or other developers will be very beneficial. I'm going to study how to actually do unit testing now.

Okay i've spent a little under an hour looking at the process of unit testing. It seems helpful to write tests first using a test runner such as Jest. The suggested workflow is basically to write a test before writing the code that is meant to pass that test, and continue this until the application is complete. Writing them afterwards is laborious and feels like it lacks purpose as the tests really help you mentally with keeping track of what the code needs to accomplish. There are different test writing technique such as writing the obvious implementation, using triangulation (writing two tests that require output that only a fully functional piece of code would output. 3 points of contact), and 'fake it until you make it' which is the in-between version of tthese two options. 

Jest has its own syntax to learn but it really doesn't seem challenging to get a handle on. The next thing i'll be doing is practicing writing tests for some basic functions, and then i'll move on to the next git lesson.