Today I decided to move on to the lesson on using API's. It's been a pretty easy topic to figure out so far, however i'm sure it will get more complicated. As of now I have signed up for the weatherAPI and giphyAPI to generate API keys and use them as practice. 

API's are essentially servers that exist to receive requests and send responses for data that it holds. The requests so far have been in the form of URL's. You generate specific URL's based on the API documentation (including the API key as a query so that you get access to the data) and it returns the data that you requested as a string. There may be some variance that i'm unaware of here but that seems to be how it works so far. 

I learned how to use fetch to request data from the giphy API and display the response (a random cat gif) on the screen. I had to provide the fetch function (which is a promise) a custom URL with special parameters based on giphy's API specs in order for it to locate the particular gifs that I want to access to. Since browsers by default restrict access to resources from outside resources (such as other domains) I needed to include a second optional parameter that is an object containing different options to configure fetch. Within this options object I needed to add the key value pair "mode: 'cors'". This mode enables cross origin resource sharing which essentially tells the browser to allow access to the requested outside resource. Once the promise resolves fetch responds either with a long string of data that represents those gifs or with an error. The .then() method can be chained on and the reponse can be input into a new function that converts it to json and returns it. It is important to explicitly return the new json object otherwise the .then() will by default return another promise. Once the object is returned the inital promise is resolved and a second .then() method can be chained on to print the object to the console (or do whatever else with it that is necessary). Instead of logging to the console, I dug down deep into the nested fields within the object to access the URL of the gif that was returned and updated the src of the existing img tag to it so that it would be displayed. This was a pretty neat process to go through and I found to be quite easy to follow.

