Yesterday was pretty successful as far as planning goes. I have a solid idea now of what i'm trying to accomplish. Today I would like to sort out how I am going to approach routing and start implementing it with some really basic components. I should be able to navigate around the main UI properly by the time i'm done. If that doesn't end up taking too long than I will also get a jump on creating my data file that holds all of the pedal information I will be using. Perhaps just creating the first object today would be a good call to ensure I have the structure figured out for the most part.

SO app.js is going to server as my route switch. It will contain all of the routes within my application. This will include the home page, the shop page, and the product page. Dynamic segments will be included for the different categories and product names.

My shop page is going to include a categories component that renders a list of categories that are links. By default the 'all products' route will be selected so all of the products will be visible. When a link is clicked the route will filter the products based on that category and only show the products that are included in that list.

Going good so far! I have a list of categories being rendered from an array, with each list item being a link that routes to a dynamic category path. I use the url parameter category to render a heading showing which path the user is currently on. Next up I would like to render all of the products that belong to a category into a div on the shop page depending on which route is active. Before I can effectively do that I will need to put together some data to work with. Not sure yet which keys each product object will need so I will just start with the basics: a name and a category.

The above logic was pretty easy to write. I've got some fake data created and everything is routing and rendering properly based on categories now. Alot of progress has been made today, mission accomplished. This ecommerce app is seeming pretty basic to me which is kind of nice. I even wrote up some super simple unit tests that I plan on expanding upon.