I had the opportunity to spend quite a bit of time throughout the day going through the new React course and i'm back at the shopping cart application again. I came across a handful of new, interesting concepts in these updated lessons as well that i'll go through quickly.

I read the React docs about choosing state structure and sharing state between components which helped identify best practices regarding how to store data in state more effectively and how to manage the one way flow of data through different component levels via lifting up state. Just review for the most part but it was helpful to go over all of the concept to see what stuck and what didn't from putting this all into practice. I did a couple of little code sandboxes to test my ability to lift state up and I had no issue with it at all so i'm pretty secure about that.

Next I went a bit deeper into using effect. The new lessons on this is so much better than before! I understand now (and this is a big mental shift) that effects should not be though of as part of a components lifecycle thats happening at any given point but instead as a synchronizing mechanism that has a start and stop. The purpose of an effect is to synchronize a component with some external data as it changes. Using a basic fetch for example: it should start synchronizing when your component mounts and it should stop synchronizing when your component unmounts. If there url is dynamic than perhaps you will want to re-synchronize your effect whenever a change to the url is made. That changing data becomes a dependency and so it is added to the dependencies array of a useEffect hook. This tells useEffect to resync when the data changes (stop sync and start again to use new data). This is a much better mental model to use when thinking about effects than trying to look from the component perspective and understanding where in the components lifecycle it is taking place.