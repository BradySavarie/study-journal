Okay so i've got the main structure of my application pretty much worked out and have an idea of how to approach this cv-builder project now. What I am going to aim to accomplish today is making an unstyled version of the application. It should render all of the components jsx depending on which mode is selected, and it should store the input values in state.

So far i've implemented the mode toggle logic on click. Pretty straightforward process, I really like the workflow compared to vanilla js. Using state is a huge improvement over managing variables locally and updating their values manually. My next task will be rendering the personal info component and updating it's state on submit. I could choose to update on change instead so I could use different states for styling purposes but as of now I don't think that is necessary to get this app working. I am trying to decide if I should store each components state within each component itself or in the app component instead to pass it in as props. 

After thinking it through a bit more I believe I can just pass the mode in as a prop and store the state of each field within each component instead. This will keep the logic a bit more separated than if I was to store everything together. The components will be conditionally rendered depending on the mode anyways, so styling won't really apply at the sub-component level. I will just need the sub-components to return the correct information.


I ran into into some issues with the above logic being difficult to work with as far as styling is concerned. Using the same component but rendering them with completely different styles is pretty messy, especially when the state is encapsulated inside of each sub-component. What I decided to do is move the state variables into the app component and create new sub-components instead (EditMode and PreviewMode) that are conditionally rendered depending on the mode value. Each of these components have access to their own unique components, that way styling them will be much easier and more maintainable in the long-term. Modularizing like this seems like it would increase complexity since there are more files to sift through but everything serves a more singular purpose this way.

I improved the existing code again by taking the main 'inputs' object in the apps state and breaking it into separate objects for each component. This groups together the corresponding key-value pairs so I don't need to pass and destructure every single input field for each component. That wouldn't be very efficient. In order to do this I needed to attach data attributes to each input field detailing which component it is a part of. When a change is made to the input, that field is recognized as the event target in the main handler function and the component that it is a part of is captured via the data attributes value. Then the state is updated by drilling into the inputs array, spreading out all of the existing objects to ensure the data is merged instead of overwritten, dynamically selecting the component object via the data attribute value, and then finding and replacing the property within it with the new changed value. It's a little trickier to access these properties when they are further nested but it makes for more maintainable code in the sub-components.

I've got the three main section all coded up in both edit and preview mode! Pretty productive day. My next goal is to add the remaining two sections (which will be quick), and then include the add and delete buttons for each section. Once that is done I can make the load example and reset buttons for edit mode and the generate pdf button for preview mode. After that all that will be left is styling. I haven't decided yet how I would like to approach styling, but I will give myself 3 options to choose from: sass, tailwind, styled-components. I miss tailwind as I haven't used it for a few projects now (plus integrating it with React will be a learning oppportunity). I would like to further develop my sass skills as well after learning a few new tricks on the last project that I can expand upon now. I have an opportunity to learn styled-components which would be a brand new skill too though. I did say that my goal was to focus on breadth-first learning so styled-components would be the option that is most in line with that goal.