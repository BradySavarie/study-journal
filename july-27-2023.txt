Been studying the reducers lesson in React today. It's an interesting concept and the hook is a good alternative to useState in situations where many event handlers are changing the same state variable. Instead of writing all of these separate handlers I can put dispatch actions when an event is triggerd which get sent to a reducer function. I writ ethe reducer function to take the action object along with the current state. It uses the action type in a switch statement to decide which actions it needs to take to update the state, and then does so accordingly when the action type in the object matches the case. To actally use the custom reducer function it needs to be passed into the useReducer hook along with an initial state. The function returns two values: state, and dispatch. state represents the stateful value that is being updated once the render is completed, while dispatch is a function that takes the current state and the action object to decide how to update it. Definitely more tricky to use than the typical useState hook but it is nice when you want to condense a bunch of handlers into one function.